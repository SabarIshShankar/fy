import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import math
import warnings

warnings.filterwarnings('ignore')
warnings.filterwarnings("ignore", category = DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning)
sns.set_style("whitegrid")
# %matplotlib inline
np.random.seed(7)

df = pd.read_csv('https://raw.githubusercontent.com/Arjun-Mota/amazon-product-reviews-sentiment-analysis/master/1429_1.csv')
df.head(5)

#we can label each review based on sentiment
#positive and negative

data = df.copy()
data.describe()

"""To analayze the review data to make decisions - products context"""

data.info()

data["asins"].unique() #Amazon Standard Identification Numbe

asins_unique = len(data["asins"].unique())
print("Number of unique asins" + str(asins_unique))

data.hist(bins=50, figsize=(20, 15))
plt.show()

from sklearn.model_selection import StratifiedShuffleSplit
#train a sentiment analysis classifier
#make sure we split such that the classifier is not imbalanced
print("Before {}".format(len(data)))
dataAfter = data.dropna(subset=["reviews.rating"])
print("After {}".format(len(dataAfter)))
dataAfter["reviews.rating"] = dataAfter["reviews.rating"].astype(int)

split = StratifiedShuffleSplit(n_splits = 5, test_size = 0.2)
for train_index, test_index in split.split(dataAfter, dataAfter["reviews.rating"]):
  strat_train = dataAfter.reindex(train_index)
  strat_test = dataAfter.reindex(test_index)

len(strat_train)

strat_train["reviews.rating"].value_counts()/len(strat_train)
print(strat_test)
#based on column

strat_test["reviews.rating"].value_counts()/len(strat_test)

reviews = strat_train.copy()
reviews.head()

len(reviews["name"].unique()), len(reviews["asins"].unique())

reviews.groupby("asins")["name"].unique()

different_names = reviews[reviews["asins"] == "B00L9EPT8O,B01E6AO69U"]["name"].unique()
for name in different_names:
    print(name)

fig = plt.figure(figsize=(16, 10))
ax1 = plt.subplot(211)
ax2 = plt.subplot(212, sharex = ax1)
reviews["asins"].value_counts().plot(kind="bar", ax=ax1, title="ASIN Frequency")
np.log10(reviews["asins"].value_counts()).plot(kind="bar", ax=ax2, title="ASIN Frequency(Log10 Adjusted")

reviews["reviews.rating"].mean()

asins_count = reviews["asins"].value_counts().index
plt.subplots(2, 1, figsize=(16, 12))
plt.subplot(2, 1, 1)
reviews["asins"].value_counts().plot(kind="bar", title="ASIN Frequency")
plt.subplot(2, 1, 2)

plt.subplot(2, 1, 2)
sns.pointplot(x = "asins", y="reviews.rating", order=asins_count, data=reviews)
plt.xticks(rotation=90)
plt.show()